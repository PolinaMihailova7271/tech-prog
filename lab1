#include <iostream>
#include <string>

using namespace std;

class Node {
public:
    int cost;
    double weight;
    string name;
    Node* next;

    Node(int c, double w, string n) {
        cost = c;
        weight = w;
        name = n;
        next = nullptr;
    }
};

class LinkedList {
private:
    Node* head;

public:
    LinkedList() {
        head = nullptr;
    }

    void print() {
        Node* temp = head;
        while (temp != nullptr) {
            cout << "cost: " << temp->cost << ", weight: " << temp->weight
                 << ", name: " << temp->name << endl;
            temp = temp->next;
        }
        cout << endl;
    }

    void addToEnd(int c, double w, string n) {
        Node* newNode = new Node(c, w, n);
        if (head == nullptr) {
            head = newNode;
        } else {
            Node* temp = head;
            while (temp->next != nullptr) {
                temp = temp->next;
            }
            temp->next = newNode;
        }
    }

    void addToBeginning(int c, double w, string n) {
        Node* newNode = new Node(c, w, n);
        newNode->next = head;
        head = newNode;
    }
  
	void addBeforeIndex(string ind, int i, double d, string s) {
       if (head == nullptr) return;

     	if (head->name == ind) {
         	addToBeginning(i, d, s);
         	return;
     	}

     	Node* temp = head;
     	while (temp->next != nullptr && temp->next->name != ind) {
         	temp = temp->next;
     	}

      	if (temp != nullptr) {
            	Node* newNode = new Node(i, d, s);
            	newNode->next = temp->next;
            	temp->next = newNode;
        	} else {
            	cout << "thing  with name"  << ind << "' was not found" << endl;
        	}
    	}
    void addAfterIndex(int index, int c, double w, string n) {
        Node* temp = head;
        int count = 0;

        while (temp != nullptr && count < index) {
            temp = temp->next;
            count++;
        }

        if (temp != nullptr) {
            Node* newNode = new Node(c, w, n);
            newNode->next = temp->next;
            temp->next = newNode;
        } else {
            cout << "Index out of bounds." << endl;
        }
    }

    void deleteItem(int c) {
        if (head == nullptr) return;

        if (head->cost == c) {
            Node* temp = head;
            head = head->next;
            delete temp;
        }

        Node* temp = head;
        while (temp->next != nullptr && temp->next->cost != c) {
            temp = temp->next;
        }

        if (temp->next != nullptr) {
            Node* toDelete = temp->next;
            temp->next = temp->next->next;
            delete toDelete;
        }
    }

    ~LinkedList() {
        Node* temp;
        while (head != nullptr) {
            temp = head;
            head = head->next;
            delete temp;
        }
    }
};

int main() {
    LinkedList list;

    list.addToEnd(150, 100.0, "Chocolate");
    list.addToBeginning(235, 250.0, "Sweets");
  	list.addBeforeIndex("Sweets", 50, 40.5, "Tomato");
    list.addAfterIndex(2, 5 ,500.0, "cake");

    cout << "Linked List after additions: " << endl;
    list.print();

    list.deleteItem(50);
    cout << "Linked List after deleting item with int value 50: " << endl;
    list.print();

    return 0;
}
